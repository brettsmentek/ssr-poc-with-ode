import webpack from 'webpack'
import DevServer from 'webpack-dev-server'
import createConfig from './webpack.config.babel'
const CustomWebpackPlugin = require('./customWebpackPlugin')

const { NODE_ENV = `development` } = process.env
const clientConfig = createConfig(`web`)

const serverConfig = createConfig(`node`)

// Compile our assets with webpack, compiler instances
const clientCompiler = webpack(clientConfig)
const serverCompiler = webpack(serverConfig)

if (NODE_ENV === `development`) {
  const { devServer: serverOptions } = clientConfig

  const customWebpackPlugin = new CustomWebpackPlugin()

  // use webpack-dev-server middleware
  serverOptions.setup = function(app) {
    app.use(customWebpackPlugin.middleware(clientCompiler))
  }

  // pass the compiler
  customWebpackPlugin.apply(clientCompiler)

  // Create a new instance of Webpack-dev-server for our client assets.
  // This will actually run on a different port than the users app. (8080)
  const app = new DevServer(clientCompiler, serverOptions)

  let watching = false

  // Create a new watcher for our server code.
  serverCompiler.watch(
    {
      quiet: true,
      stats: `none`,
    },
    /* eslint-disable no-unused-vars */
    (err, stats) => {}
  )

  // TODO: make server concurrent. Was having problems because the
  // Start Server webpack plugin was starting before the client build
  // was finished and the server relies on stats generated bythe client
  app.middleware.waitUntilValid(() => {
    // Start our server webpack instance in watch mode after assets compile
    serverCompiler.plugin(`done`, stats => {
      serverStats = stats
      // If we've already started the server watcher, bail early.
      if (watching) return

      watching = true
    })

    app.listen(serverOptions.port, serverOptions.host, err => {
      if (err) throw err

      console.log(
        `==> ðŸ”¥  Webpack development server listening on port`,
        serverOptions.port
      )
    })
  })
} else {
  clientCompiler.run(() => {})
  serverCompiler.run(() => {})
}
